  - name: ansible to install pymysql
    ansible.builtin.pip:
      name:
      - PyMySQL
      - cryptography
      executable: pip3.9
  - name: disable defualt nodejs
    ansible.builtin.command: dnf module disable nodejs -y

  - name: enable nodejs 20
    ansible.builtin.command: dnf module enable nodejs:20 -y

  - name: install nodejs
    ansible.builtin.package:
      name: nodejs
      # name: "{{ item }}"
      state: present
      # loop:
      #   - nodejs
      #   - mysql

  - name: create expense user
    ansible.builtin.user:
      name: expense

  - name: import tasks from common role
    ansible.builtin.import_role:
      name: common
      tasks_from: app-pre-req

  - name: install dependencies
    ansible.builtin.command: npm install package.json
    args:
      chdir: /app

  # - name: Install dependencies using npm
  #   ansible.builtin.command:
  #     cmd: npm install
  #     args:
  #       chdir: /app
  # - name: Install dependencies using npm
  #   ansible.builtin.command:
  #       cmd: npm install
  #       chdir: /app

  - name: copy backend service # copy only works file without variables
    ansible.builtin.template:
      src: /home/ec2-user/expense-ansible-roles/roles/backend/tempalates/backend.service.j2 # backend.service.j2 if using remot-src but my code not running root running /home 
      dest: /etc/systemd/system/backend.service
    become: true

  - name: Copy backend.sql to the remote host
    copy:
      src: /local/path/to/backend.sql
      dest: /app/schema/backend.sql

  - name: import mysql data
    community.mysql.mysql_db: 
      login_user: root
      login_password: "{{ mysql_root_password }}"
      login_host: "{{ login_host }}"
      target: /app/schema/backend.sql
      # state: dump
      state: import
      name: all
    become: true
      

  - name: daemon reload
    ansible.builtin.systemd_service:
      daemon_reload: true
      state: restarted
      name: backend